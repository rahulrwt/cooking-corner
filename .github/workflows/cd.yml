name: Continuous Deployment 

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ap-south-1
          aws s3 cp s3://cooking-corner-codepipeline/credentials/awsCred.txt . 
          ls
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true

      - name: Test on EC2 instance and Deploy
        run: |
              aws s3 cp s3://cooking-corner-terraform-s3/output.json output.json
              launch_template=$(jq -r '.app_server_launch_template_id.value' output.json)
              asg_name=$(jq -r '.app_server_asg_name.value' output.json)
              # subnet_id=$(jq -r '.app_server_subnet.value' output.json)

              echo " Step 1:Creating EC2 instance using template : $launch_template ..."

              instance_id=$(aws ec2 run-instances --launch-template LaunchTemplateId=$launch_template --query 'Instances[0].InstanceId' --output text)
              public_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
              
              echo " Step 2:Run System Test"
              ./system-test.sh $public_ip

              echo " Step 3: Get the current maximum size of the ASG"
              current_max_size=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg_name --query "AutoScalingGroups[0].MaxSize" --output text)
              current_desired_size=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $asg_name --query "AutoScalingGroups[0].DesiredCapacity" --output text)
              
              echo "Step 4: Calculate the new maximum size by adding 1"
              new_max_size=$((current_max_size*2))
              # new_desired_size=$((current_desired_size*2))

              echo "Step 5:Increase ASG Max count to accomodate new instance"
              aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name --max-size $new_max_size 

              echo "Step 6:Attaching $instance_id to ASG"
              aws autoscaling attach-instances --instance-ids $instance_id --auto-scaling-group-name $asg_name

              echo "Step 7:Decreasing ASG size to remove previous instances"
              aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg_name --max-size $current_max_size

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        working-directory: ./system-tests
